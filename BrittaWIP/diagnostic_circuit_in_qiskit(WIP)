import numpy as np
import qutip as qt
import math
import operator
from random import randint, uniform, choice,random
import time
import qiskit as q
from qiskit import QuantumRegister,QuantumCircuit,ClassicalRegister,Aer,execute,IBMQ
import qiskit.extensions.unitary as qeu
IBMQ.enable_account("1d4fb9742e3820be4fd4072b404bad76458697d106c8e2894358cda441c34f156e73c0d788ac97ac23be7745aa6e323db69c956860ee76b45f14be2514cbe716")
my_provider = IBMQ.get_provider()
backend1=Aer.get_backend('qasm_simulator')
backend2=my_provider.get_backend('ibmq_16_melbourne')
from qiskit.quantum_info.operators import Operator
import scipy.sparse as sps
import csv
#__________________________________________________________________________________________________________#
#splits the data set into testing and training data. Need to initialize empty vectors first
def handleDataset(array,split,trainingSet=[],testSet=[]):
    #with open(filename,'r') as csvfile:
     #   lines = csv.reader(csvfile)
      #  dataset=list(lines)
    dataset=array
    for x in range(len(dataset)-1):
        for y in range(len(dataset[0])-1):
            dataset[x][y]=float(dataset[x][y])
            if random() < split:
                trainingSet.append(dataset[x])
            else:
                testSet.append(dataset[x])
        #print(trainingSet, 'aaaahhh', testSet)
    return 0
#__________________________________________________________________________________________________________#
#Finds the euclidean distance bewteen two vectors of length 'length;
def euclideanDistance(ins1,ins2,length):
    dis=0
    for x in range(length):
        dis += pow((ins1[x]-ins2[x]),2)
    return math.sqrt(dis)
#__________________________________________________________________________________________________________#
#finds the k points nearest a test point
def getKNeighbors(trainingSet,test,k):
    distances=[]
    length=len(test)-1
    for x in range(len(trainingSet)):
        dist=euclideanDistance(test,trainingSet[x],length)
        distances.append((trainingSet[x],dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors=[]
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors
#__________________________________________________________________________________________________________#
#determines the classes of a vector of neighbors and returns a prediction of a test point's class
def getResponse(neighbors):
    classVotes={}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]
        if response in classVotes:
            classVotes[response]+=1
        else:
            classVotes[response]=1
        sortedVotes=sorted(classVotes.items(),key=operator.itemgetter(1),reverse=True)
        return sortedVotes[0][0]
#__________________________________________________________________________________________________________#
#Finds the accuracy of a test set prediction
def getAccuracy(testSet, predictions):
    correct=0
    for x in range(len(testSet)):
        if testSet[x][-1] == predictions[x]:
            correct+=1
        print("predicted:" + predictions[x],"actual:" + testSet[x][-1])
    return (correct/float(len(testSet)))*100.0
#__________________________________________________________________________________________________________#
#Performs KNN classification given a dataset, a training-test split, and k
def KNN(path,split,k,testbatch):
    testingset,trainingset=[],[]
    #Insert csv file name and split here:
    #path=input("Give csv file location, remembering to use forward slashes: ")
    split = float(split)
    if split > 1 or split < 0:
        print("Incorrect split input given. Default used.")
        split = 0.66
    if testbatch==[]:
        handleDataset(path,split,trainingset,testingset)
    else:
        testingset,trainingset=path,testbatch
     #generate predictions
    predictions,k=[],k
    for x in range(len(testingset)):
        neighbors = getKNeighbors(trainingset,testingset[x],k)
        result = getResponse(neighbors)
        predictions.append(result)
        #print('> predicted=' + repr(result) + ',actual=' + repr(testingset[x][-1]))
    accuracy = getAccuracy(testingset,predictions)
    print('Accuracy: ' + repr(accuracy) + '%')
    return
#__________________________________________________________________________________________________________#
id2=np.eye(2)
#HADAMARDS_________________________________________________________________________________________________#
def multi_qubit_hadamard(regular_hadamard_gate):
    theta = uniform(0.0,math.pi*2.0)
    (n,n) = (qt.Qobj(regular_hadamard_gate)).shape
    N = np.int(((np.log(n))/(np.log(2))))
    phase=qt.qip.operations.globalphase(theta,N).full()
    reg=regular_hadamard_gate
    multi_qubit_hadamard = (qt.Qobj(phase)*qt.Qobj(reg)).full()
    return multi_qubit_hadamard,theta
#__________________________________________________________________________________________________________#
def hadamard_preprocessing(hada):
    storage = hada
    (n, n) = np.shape(hada)
    q = np.log(n) / np.log(2)  # number of qubits
    seed = randint(0, q - 1)
    forbidden = []
    mag = storage[0][0]  # magnitude of the elements in the hadamard
    ongoing = True
    while ongoing:
        i = 1
        count = 0
        while seed in forbidden:
            seed = randint(0, q - 1)
            count += 1
            if count == 20:
                break
        if seed == 0:
            u1 = qt.qip.operations.hadamard_transform(1).full()
        else:
            u1 = id2
        while qt.Qobj(u1).shape != (n, n):
            if i == seed:  # set a hadamard on specified qubit
                u1 = np.kron(u1,qt.qip.operations.hadamard_transform(1).full())
            else:
                u1 = np.kron(u1,id2)
            i += 1
        check = qt.Qobj(u1)*qt.Qobj(hada)
        if check.full()[0][0] > mag:  # if there's a hadamard on that qubit, true
            ongoing = False
        elif count == 20:
            break
        else:  # no hadamard on that seed qubit
            forbidden.append(seed)
    return hada, seed
#__________________________________________________________________________________________________________#
def alter_hadamard(hada, seed, cat):
    (n, n) = np.shape(hada)
    theta = uniform(0.0, math.pi * 2.0)
    # pick a rotation any rotation
    phaser = randint(0, 3)
    if phaser == 0:
        gate = qt.qip.operations.phasegate(theta).full()
        cat=cat+'PHASEGATE1'
    elif phaser == 1:
        gate = qt.qip.operations.rz(theta).full()
        cat=cat+'RZ1'
    elif phaser == 2:
        gate = qt.qip.operations.ry(theta).full()
        cat=cat+'RY1'
    else:
        gate = qt.qip.operations.globalphase(theta).full()
        cat=cat+'GLOBALPHASE1'
    # alter gate
    if seed == 0:
        u1 = gate
    else:
        u1 = id2
    i = 1
    while np.shape(u1) != (n, n):
        if i == seed:  # set a alteration on specified qubit
            u1 = np.kron(u1,gate)
        else:
            u1 = np.kron(u1,id2)
        i += 1
    final_gate = (qt.Qobj(u1)*qt.Qobj(hada)).full()
    return final_gate,theta,cat
#__________________________________________________________________________________________________________#
from random import choice
def h_reassign(hada,cat_alt):
    seed = choice([0,1])
    if seed == 0:  # alter whole hadamard
        alt_had,ang = multi_qubit_hadamard(hada)
        cat_alt=cat_alt+'GLOBALPHASE2'
        return alt_had, None, ang, cat_alt
    if seed == 1:  # alter specific hadamard
        hada, seed2 = hadamard_preprocessing(hada)
        alt_had,ang,cat_alt = alter_hadamard (hada, seed2, cat_alt)
        return alt_had,seed2,ang,cat_alt
#RANDOM UNITARIES__________________________________________________________________________________________#
#code which gives an original unitary gate
def random_unitary_gate(delta,alpha,theta,beta,value):
    gate = qt.qip.operations.phasegate(delta)*qt.qip.operations.rz(alpha)*qt.qip.operations.ry(theta)*qt.qip.operations.rz(beta).full()
    if value == True:
        gate = (qt.Qobj(gate)*qt.Qobj(np.array([[0,1],[1,0]]))).full()
    else:
        gate = gate
    return gate
#__________________________________________________________________________________________________________#
def random_angles():
    #gets a random value for each variable in the gate
    choice=randint(1,4)
    unitary_gate=()
    if choice==1: #Pauli-Y Gate
        unitary_gate=(0.0,math.pi/2,2*math.pi,math.pi/2,True)
    elif choice==2: #Pauli-Z Gate
        unitary_gate=(0.0,0.0,math.pi,0.0,True)
    elif choice==3: #S Gate
        unitary_gate=(-math.pi/2,math.pi,math.pi,math.pi,False)
    elif choice == 4: #T Gate
        unitary_gate = (-math.pi/4,math.pi/2,2*math.pi,0.0,False)
    delta,alpha,theta,beta,value = unitary_gate
    return delta,alpha,theta,beta,value
#__________________________________________________________________________________________________________#
#code which takes an angle and alters the gate
def random_altered_unitary_gate(delta,alpha,theta,beta,value):
    delta2,alpha2,theta2,beta2=delta,alpha,theta,beta
    if delta==0.0 and alpha==0.0 and theta==math.pi and value==True:
        angles = ['delta','alpha','beta']
    else:
        angles=['delta','alpha','theta','beta']
    altered_variable=choice(angles)
    if altered_variable=='delta':
        delta2 = uniform(0.0,2.0*math.pi)
    if altered_variable=='alpha':
        alpha2 = uniform(0.0,2.0*math.pi)
    if altered_variable=='theta':
        theta2 = uniform(0.0,2.0*math.pi)
    if altered_variable=='beta':
        beta2 = uniform(0.0,2.0*math.pi)
    gate = qt.qip.operations.phasegate(delta2)*qt.qip.operations.rz(alpha2)*qt.qip.operations.ry(theta2)*qt.qip.operations.rz(beta2).full()
    if value==True:
        gate=(qt.Qobj(gate)*qt.Qobj(np.array([[0,1],[1,0]]))).full()
    else:
        gate=gate
    if delta==delta2 and alpha==alpha2 and theta==theta2 and beta==beta2:
        return random_altered_unitary_gate(delta,alpha,theta,beta,value)
    return gate,[delta2,alpha2,theta2,beta2,value]
#__________________________________________________________________________________________________________#
#gives both an original and altered unitary gate
#can be commented to return original gate, corresponding altered gate(only one thing different from original), or both
def unitary_gate(choice):
    delta,alpha,theta,beta,value = random_angles()
    matrix=random_unitary_gate(delta,alpha,theta,beta,value)
    if choice:
        matrix,[delta,alpha,theta,beta,value]=random_altered_unitary_gate(delta,alpha,theta,beta,value)
    return (matrix,[delta,alpha,theta,beta,value])
#__________________________________________________________________________________________________________#
def rot(qubits,gate,value):
    a=randint(0,qubits-2)
    b=randint(a+1,qubits-1)
    k=qt.qip.operations.cnot(qubits,a,b).full()
    if value==True:
        if np.array_equal(k,gate)==False:
            return k,(a,b)
        else:
            return rot(qubits,k,True)
    else:
        return k,(a,b)
#CIRCUIT GENERATION________________________________________________________________________________________#
def take_places(circuit_i,qubits,id2,value,ind):
    #aka(gate,#qubits,identity,whether altered(RandomUnitary),original index(new random at the same index))
    place=0
    if value==False:
        place+=randint(0, qubits-1)
    elif value==True:
        place+=ind
    temp=id2
    if place==0:
        temp=circuit_i
    i=1
    while i<qubits:
        if i==place:
            temp=np.kron(temp,circuit_i)
        else:
            temp=np.kron(temp,id2)
        i+=1
    return temp,place
#__________________________________________________________________________________________________________#
#Generates a random circuit
def arb_circuit_generator(length,qubits):
    circuit,angles=[],[]
    id2=np.eye(2)
    Had,CNOT,Ran = 0,0,0
    indices=[]
    while len(circuit)<2*length:
        seed=randint(1,3)
        if seed ==1:
            temp=qt.qip.operations.hadamard_transform().full()
            temp,index=take_places(temp,qubits,id2,False,None)
            circuit.append(temp)
            circuit.append("Hadamard")
            indices.append(index)
            angles.append(None)
            Had = Had +1
        if seed == 2:
            temp,index=rot(qubits,None,False)
            circuit.append(temp)
            circuit.append("CNOT")
            CNOT = CNOT +1
            indices.append(index)
            angles.append(None)
        if seed == 3:
            (temp,ang)=unitary_gate(False)
            temp,index=take_places(temp,qubits,id2,False,None)
            circuit.append(temp)
            circuit.append("Random Unitary")
            angles.append(ang)
            indices.append(index)
            Ran = Ran +1
    composition = ["Hadamards:",Had,"CNOT:",CNOT,"Random Unitary:",Ran]
    return (circuit,angles,composition,indices)
#CATEGORIES________________________________________________________________________________________________#
def categorize(circuit):
    cat=[]
    it_not,it_h,it_rand,it_id=1,1,1,0
    for i in range(len(circuit)):
        if i%2!= 0:
            continue
        if circuit[i+1] in cat:
            if circuit[i+1] == "Hadamard":
                it_h+=1
                t="Hadamard" + str(it_h)
                cat.append(t)
            elif circuit[i+1] == "CNOT":
                it_not+=1
                t="CNOT" + str(it_not)
                cat.append(t)
            elif circuit[i+1] == "Random Unitary":
                it_rand+=1
                t="Random Unitary" + str(it_rand)
                cat.append(t)
        elif circuit[i+1] == "Identity":
            it_id +=1
            t="Measurement" + str(it_id)
            cat.append(t)
        else:
            cat.append(circuit[i+1])
        i+=2
    return(cat)
#Input vectors__________________________________________________________________________________________#
def start_circ(qs):
    q1=QuantumRegister((2 * qs) + 1)
    c1=ClassicalRegister(1)
    qc1=QuantumCircuit(q1, c1)
    qc1.h(2*qs)  # ancilla
    return qc1

def gen_initial(n, choice, qs):
    inds,circuitsinitial=[],[]
    def test_opt1(qc1,index):
        if index==0:
            qc1.x(0)
            qc1.x(qs)
        elif index==1:
            qc1.h(1)#
            qc1.h(qs)
        elif index==2:#
            for i in range(qs):
                qc1.x(i)
                qc1.x(i+qs)
            qc1.h(0)
            qc1.cx(0, 1)
            qc1.cx(1, 2)
            qc1.cx(2, 3)
            qc1.h(qs)
            qc1.cx(qs, 1+qs)
            qc1.cx(1+qs, 2+qs)
            qc1.cx(2+qs, 3+qs)
        elif index==3:#
            for i in range(qs):
                qc1.x(i)
                qc1.x(i+qs)
            qc1.h(0)
            qc1.cx(0, 1)
            qc1.cx(0, 2)
            qc1.h(qs)
            qc1.cx(0+qs, 1+qs)
            qc1.cx(0, 2+qs)
        return
    def test_opt2(qc1,index):
        if index==0:
            qc1.x(0)#
            qc1.x(qs)
        elif index==1:
            qc1.h(1)#
            qc1.h(qs)
        elif index==2:
            for i in range(qs):
                qc1.x(i)
                qc1.x(i + qs)
            qc1.h(0)
            qc1.cx(0, 1)
            qc1.cx(1, 2)
            qc1.cx(2, 3)
            qc1.h(qs)
            qc1.cx(qs, 1 + qs)
            qc1.cx(1 + qs, 2 + qs)
            qc1.cx(2 + qs, 3 + qs)
        elif index==3:#
            for e in range(qs):
                qc1.x(e)
                qc1.x(e+qs)
            qc1.h(0)  # fix for universal?
            qc1.h(3)
            qc1.cx(0, 1)
            qc1.cx(1, 2)
            qc1.cx(2, 3)
            qc1.h(qs)
            qc1.h(3+qs)
            qc1.cx(qs, 1+qs)
            qc1.cx(1+qs, 2+qs)
            qc1.cx(2+qs, 3+qs)
        return
    def qft(qc1,first,last):
        for i in range(first,last):
            qc1.h(i)
            for j in range(i + 1, last):
                qc1.cu1(math.pi / (2 ** (j)), j, i)
        return
    if choice==1:
        for i in range(n):
            qc1=start_circ(qs)
            bin = np.binary_repr(i).zfill(qs)
            ct=-1
            for num in bin:
                ct += 1
                if num == '1':
                    qc1.x(ct)
                    qc1.x(ct+qs)
            circuitsinitial.append(qc1)
    elif choice==3: #Hadamard Option 1
        for i in range(4):
            qc1 = start_circ(qs)
            test_opt1(qc1,i)
            for w in range(qs):
                qc1.h(w)
                qc1.h(w+qs)
            circuitsinitial.append(qc1)
    elif choice==4: #QFT option 1
        for j in range(4):
            qc1=start_circ(qs)
            test_opt1(qc1,j)
            qft(qc1,0,qs-1)
            qft(qc1,qs,2*qs-1)
            circuitsinitial.append(qc1)
    elif choice==5: #Hadamard Option 2
        for dex in range(4):
            qc1=start_circ(qs)
            test_opt2(qc1,dex)
            for w in range(qs):
                qc1.h(w)
                qc1.h(w+qs)
            circuitsinitial.append(qc1)
    elif choice==6: #QFC Option 2
        for dex in range(4):
            qc1=start_circ(qs)
            test_opt2(qc1,dex)
            qft(qc1,0,qs-1)
            qft(qc1,qs,2*qs-1)
            circuitsinitial.append(qc1)
    return circuitsinitial
#Qiskit circuit____________________________________________________________________________________________#
def global_phase(circuit, q, theta, n):
    if type(q)==bool:
        for i in range(n):
            global_phase(circuit,[i],theta,n)
    else:
        for j in q:
            circuit.u1(theta, j)
            circuit.x(j)
            circuit.u1(theta, j)
            circuit.x(j)
    return
#__________________________________________________________________________________________________________#
import cmath
def phasegate(theta):
    gate=np.array([[1,0],[0,cmath.exp(1.0j*theta)]])
    return gate
#__________________________________________________________________________________________________________#
def rndUnitary(angs):
    delta, alpha, theta, beta, value=angs[0],angs[1],angs[2],angs[3],angs[4]
    gate=(qt.qip.operations.phasegate(delta)*qt.qip.operations.rz(alpha)*qt.qip.operations.ry(theta)*qt.qip.operations.rz(beta)).full()
    return gate
#__________________________________________________________________________________________________________#
def decompose(cat, index, ang, c, qs): #  qs is number of qubits
    z=index
    hads=['GLOBALPHASE2','GLOBALPHASE1','RY1','RZ1','PHASEGATE1']
    if 'Hadamard' in cat:
        if ang==None:
            c.h(z)
        elif ang!=None:
            if hads[0] in cat:
                c.h(z)
                global_phase(c, True, ang, qs)
            elif hads[1] in cat:
                c.h(z)
                global_phase(c,[z],ang,qs)
            elif hads[2] in cat:
                c.h(z)
                c.ry(ang,z)
            elif hads[3] in cat:
                c.h(z)
                c.rz(ang,z)
            elif hads[4] in cat:
                c.h(z)
                rgate=qeu.UnitaryGate(phasegate(ang))
                c.unitary(rgate, [z])
    elif 'CNOT' in cat:
        c.cx(z[0],z[1])
    elif 'Random Unitary' in cat:
        agate=qeu.UnitaryGate(rndUnitary(ang))
        c.unitary(agate,[z])
    return
#__________________________________________________________________________________________________________#
def to_qiskit(circuit, initials, cat, indicesERR, anglesERR, qs, bck):
    probs,index=[0,0,0,0],0
    for c in initials[:4]:
        for m in range(len(circuit)):
            decompose(cat[m],indicesERR[m],anglesERR[m],c,qs)
    for c in initials[:4]:
        for j in range(qs):
            c.cswap(2*qs,j,j+qs)
        c.h(2*qs)
        #print(c)
        c.measure(2*qs,0)
        shots=100
        job=execute(c,backend=bck,shots=shots)
        counts = [job.result().get_counts(i) for i in range(len(job.result().results))]
        result=counts[0]['0']/shots
        probs[index]+=result
        index+=1
    return probs

def bill_bailey(circuit,angles,cat,qubits,indices,backend,probabilities,gate_holder,cat2,ci,i):
    if "Hadamard" in cat[i]:
        indERR, angERR = indices.copy(), angles.copy()
        alt_gate, index, angs, cat2[i] = h_reassign(gate_holder, cat[i])
        circuit[i] = alt_gate
        if index != None:
            indERR[i] = index
        angERR[i] = angs
        probs = to_qiskit(circuit, ci, cat2, indERR, angERR, qubits, backend)
        probs.append(cat2[i])
        probabilities.append(probs)
    elif "Random" in cat2[i]:
        indERR, angERR = indices.copy(), angles.copy()
        (delta, alpha, theta, beta, value) = angles[i]
        temp_alt, angs = random_altered_unitary_gate(delta, alpha, theta, beta, value)
        alt_gate, index = take_places(temp_alt, qubits, id2, True, indices[i])
        angERR[i] = angs
        indERR[i] = index
        circuit[i] = alt_gate
        probs = to_qiskit(circuit, ci, cat2, indERR, angERR, qubits, backend)
        probs.append(cat2[i])
        probabilities.append(probs)
    elif "CNOT" in cat2[i]:
        indERR, angERR = indices.copy(), angles.copy()
        alt_gate, index = rot(qubits, gate_holder, True)
        circuit[i] = alt_gate
        indERR[i] = index
        probs = to_qiskit(circuit, ci, cat2, indERR, angERR, qubits, backend)
        probs.append(cat2[i])
        probabilities.append(probs)
    return
#__________________________________________________________________________________________________________#
#As I was improvising a lot, the Colin Mochrie name STAYS
def colin_mochrie(circuit,angles,pop,cat,qubits,indices,choice,backend):
    probabilities,n=[],2**qubits
    if backend==backend2:
        for i in range(5):
            Angles, Indices = angles.copy(), indices.copy()
            ci = gen_initial(n, choice, qubits)
            gate_holder= circuit[i]
            cat2=cat.copy()
            bill_bailey(circuit, Angles, cat, qubits, Indices, backend, probabilities, gate_holder, cat2, ci,i)
    else:
        for j in range(pop):
                for p in range(len(circuit)):
                    Angles,Indices=angles.copy(),indices.copy()
                    ci=gen_initial(n,choice,qubits)
                    gate_holder=circuit[p]
                    cat2=cat.copy()
                    bill_bailey(circuit,Angles,cat,qubits,Indices,backend,probabilities,gate_holder,cat2,ci,p)
    return probabilities
#__________________________________________________________________________________________________________#
def main():
    pop=6                                         #input #("How many of each gate do you want to populate? ")
    pop=int(pop)
    qubits=4 #input                                                                    #("How many qubits? ")
    qubits=int(qubits)
    length=30 #input                                                     #("how many gates in the circuit? ")
    length=int(length)
    split=0.8 #input                  #("Give training set split, in the form of a number between 0 and 1: ")
    k=5  #input                                                                         #("Give a k value: ")
    k=int(k)

    (circuit, angles, composition,indices) = arb_circuit_generator(length,qubits)
    cat,alt,n=categorize(circuit),[],2**qubits
    print(cat,'\n',composition)
    for i in range(len(circuit)):
        if type(circuit[i]) == str:
            continue
        else:
            alt.append(circuit[i])
    choice,index = [1, 3, 4, 5, 6], 0
    vector_name = ['Basis', 'Hadamard 1', 'QFT', 'Hadamard 2', 'Fourier State']
    for x in choice:
        print('====================',vector_name[index],'================')
        probs = colin_mochrie(alt,angles,pop,cat,qubits,indices,x,backend1)
        KNN(probs, split, k, [])
        print('creating hardware test batch...')
        testbatch= colin_mochrie(alt,angles,pop,cat,qubits,indices,x,backend2)
        KNN(probs,split,k,testbatch)
        index+=1

    return 0

start_time = time.time()
main()
print("--- %s seconds ---" % (time.time() - start_time))
